<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://becagis.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://becagis.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-13T12:59:47+00:00</updated><id>https://becagis.github.io/feed.xml</id><title type="html">Thang Quach</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://becagis.github.io/2024/05/14/google-gemini-updates-flash-15-gemma-2-and-project-astra.html" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://becagis.github.io/2024/05/14/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://becagis.github.io/2024/05/14/google-gemini-updates-flash-15-gemma-2-and-project-astra.html"><![CDATA[<p>May 14, 2024[[read-time]] min read We‚Äôre introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we‚Äôre introducing Gemini 1.5 Flash: a model that‚Äôs lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We‚Äôre also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5‚Äôs 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It‚Äôs optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it‚Äôs a lighter weight model than 1.5 Pro, it‚Äôs highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it‚Äôs been trained by 1.5 Pro through a process called ‚Äúdistillation,‚Äù where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash‚Äôs availability and pricing.Over the last few months, we‚Äôve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we‚Äôve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We‚Äôve improved control over the model‚Äôs responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we‚Äôve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we‚Äôre now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do ‚Äî not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we‚Äôre also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We‚Äôre announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we‚Äôve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind‚Äôs mission to build AI responsibly to benefit humanity, we‚Äôve always wanted to develop universal AI agents that can be helpful in everyday life. That‚Äôs why today, we‚Äôre sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do ‚Äî and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we‚Äôve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we‚Äôve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we‚Äôve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they‚Äôre being used in, and respond quickly, in conversation.With technology like this, it‚Äôs easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We‚Äôve made incredible progress so far with our family of Gemini models, and we‚Äôre always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we‚Äôre able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google‚Äôs privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let‚Äôs stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://becagis.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog.html" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://becagis.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://becagis.github.io/2022/04/23/displaying-external-posts-on-your-al-folio-blog.html"><![CDATA[<h3>External Posts on Your al-folio¬†Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website!¬†üéâüéâ</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as¬†sources.</p> <p>Any questions or suggestions? üëâ Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on¬†GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">QGIS Server Installation on Windows</title><link href="https://becagis.github.io/tutorial/2020/05/08/qgis-server.html" rel="alternate" type="text/html" title="QGIS Server Installation on Windows"/><published>2020-05-08T00:00:00+00:00</published><updated>2020-05-08T00:00:00+00:00</updated><id>https://becagis.github.io/tutorial/2020/05/08/qgis-server</id><content type="html" xml:base="https://becagis.github.io/tutorial/2020/05/08/qgis-server.html"><![CDATA[<hr/> <h3 id="1-install-qgis-server">1. Install QGIS Server</h3> <h4 id="--download-osgeo4w">- <a href="https://trac.osgeo.org/osgeo4w/">Download OSGeo4W</a></h4> <h4 id="--run-osgeo4w-with-advanced-install-option">- Run OSGeo4W with Advanced Install option</h4> <p><img src="/assets/images/posts/2020/QGISServer/osgeo4w.png" alt="OSGeo4W"/></p> <h4 id="--search-and-choose-qgis-server-to-install">- Search and choose qgis-server to install</h4> <p><img src="/assets/images/posts/2020/QGISServer/qgisserver.png" alt="QGIS Server"/></p> <h4 id="--install-apache-as-web-server-for-qgis-server-download-the-xampp-installer-for-windows-and-install-apache">- Install Apache as Web Server for QGIS Server: Download the <a href="https://www.apachefriends.org/download.html">XAMPP installer</a> for Windows and install Apache</h4> <p><img src="/assets/images/posts/2020/QGISServer/apache.png" alt="Apache Install"/></p> <h4 id="--configure-apache-to-run-qgis-server">- Configure Apache to run QGIS Server:</h4> <h5 id="--edit-the-httpdconf-file-cxamppapachehttpdconf--and-make-the-following-changes">- Edit the httpd.conf file (C:\xampp\apache\httpd.conf) and make the following changes:</h5> <p>From:<br/> <code class="language-plaintext highlighter-rouge">ScriptAlias /cgi-bin/ "C:/xampp/cgi-bin/"</code><br/> To:<br/> <code class="language-plaintext highlighter-rouge">ScriptAlias /cgi-bin/ "c:/OSGeo4W64/apps/qgis/bin/"</code></p> <p>From:<br/> <code class="language-plaintext highlighter-rouge">&lt;Directory "C:/xampp/cgi-bin"&gt; AllowOverride None Options None Require all granted &lt;/Directory&gt;</code> <br/> To: <br/> <code class="language-plaintext highlighter-rouge">&lt;Directory "c:/OSGeo4W64/apps/qgis/bin"&gt; SetHandler cgi-script AllowOverride None Options ExecCGI Order allow,deny Allow from all Require all granted &lt;/Directory&gt;</code></p> <p>From:<br/> <code class="language-plaintext highlighter-rouge">AddHandler cgi-script .cgi .pl .asp</code><br/> To:<br/> <code class="language-plaintext highlighter-rouge">AddHandler cgi-script .cgi .pl .asp .exe</code></p> <h6 id="then-at-the-bottom-of-httpdconf-add">Then at the bottom of httpd.conf, add:</h6> <p><code class="language-plaintext highlighter-rouge">SetEnv GDAL_DATA "C:\OSGeo4W64\share\gdal" SetEnv QGIS_AUTH_DB_DIR_PATH "C:\OSGeo4W64\apps\qgis\resources" SetEnv PYTHONHOME "C:\OSGeo4W64\apps\Python37" SetEnv PATH "C:\OSGeo4W64\bin;C:\OSGeo4W64\apps\qgis\bin;C:\OSGeo4W64\apps\Qt5\bin;C:\WINDOWS\system32;C:\WINDOWS; C:\WINDOWS\System32\Wbem" SetEnv QGIS_PREFIX_PATH "C:\OSGeo4W64\apps\qgis" SetEnv QT_PLUGIN_PATH "C:\OSGeo4W64\apps\qgis\qtplugins;C:\OSGeo4W64\apps\Qt5\plugins"</code></p> <h5 id="--restart---apache-web-server-from-the-xampp-control-panel">- Restart Apache web server from the XAMPP Control Panel</h5> <p><img src="/assets/images/posts/2020/QGISServer/startapache.png" alt="Apache Restart"/></p> <h5 id="--open-web-browser-to-testing-a-getcapabilities-request-to-qgis-server">- Open Web browser to testing a GetCapabilities request to QGIS Server:</h5> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetCapabilities</code><br/> <img src="/assets/images/posts/2020/QGISServer/getcapabilities.png" alt="GetCapabilities"/></p> <hr/> <h3 id="2-publish-maps-to-qgis-server-from-a-qgis-project">2. Publish maps to QGIS Server from a QGIS Project</h3> <h4 id="--download-demo-data-unzip-the-files-in-the-qgis-server-tutorial-data">- Download <a href="https://github.com/qgis/QGIS-Training-Data/archive/v2.0.zip">demo data</a>, unzip the files in the qgis-server-tutorial-data</h4> <h4 id="--open-worldqgs-or-world3qgs-and-save-as-project-to-qgis-bin-folder-cosgeo4w64appsqgisbin">- Open world.qgs or (world3.qgs) and Save as Project to QGIS bin folder <code class="language-plaintext highlighter-rouge">(C:\OSGeo4W64\apps\qgis\bin)</code></h4> <p><img src="/assets/images/posts/2020/QGISServer/qgisproject.png" alt="QGIS Project"/></p> <h4 id="--there-are-4-layers-in-the-worldqgs-project">- There are 4 layers in the world.qgs project:</h4> <h6 id="airports">airports</h6> <h6 id="places">places</h6> <h6 id="countries">countries</h6> <h6 id="countries_shapeburst">countries_shapeburst</h6> <h4 id="--configure-wms-wmts-and-wfs-menu-project--properties--qgis-server">- Configure WMS, WMTS and WFS: menu Project ‚Äì&gt; Properties ‚Äì&gt; QGIS Server:</h4> <p><img src="/assets/images/posts/2020/QGISServer/configureqgisserver.png" alt="Configure QGIS Server"/></p> <hr/> <h3 id="3-test-qgis-server">3. Test QGIS Server:</h3> <h3 id="wms">WMS</h3> <h4 id="getcapabilities">GetCapabilities:</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetCapabilities&amp;map=world.qgs</code><br/> <img src="/assets/images/posts/2020/QGISServer/getcapabilities2.png" alt="Get Capabilities of world map"/></p> <h4 id="getporjectsetting">GetPorjectSetting</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?MAP=world.qgs&amp;SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetProjectSettings</code><br/> <img src="/assets/images/posts/2020/QGISServer/getprojectsetting.png" alt="Get Project Setting"/></p> <h4 id="getmap">GetMap</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?MAP=world.qgs&amp;SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX=10208324, 949379, 13572097, 2661355&amp;SRS=EPSG:3857&amp;WIDTH=665&amp;HEIGHT=551&amp;LAYERS=countries&amp;FORMAT=image/jpeg</code><br/> <img src="/assets/images/posts/2020/QGISServer/getmap.png" alt="Get Map"/></p> <h4 id="filter-and-opacity">Filter and Opacity</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?MAP=world.qgs&amp;SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX=-432786,4372992,3358959,7513746&amp;SRS=EPSG:3857&amp;WIDTH=665&amp;HEIGHT=551&amp;FORMAT=image/jpeg&amp;LAYERS=countries,countries_shapeburst&amp;STYLES=classified_by_name,blue&amp;OPACITIES=255,30&amp;FILTER=‚Äùcountries:\‚Äùname\‚Äù IN ('Germany','Italy')‚Äù</code><br/> <img src="/assets/images/posts/2020/QGISServer/filterandopacity.png" alt="Filter and Opacity"/></p> <h4 id="use-redlining">Use Redlining</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?MAP=world.qgs&amp;SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX=-432786,4372992,3358959,7513746&amp;SRS=EPSG:3857&amp;WIDTH=665&amp;HEIGHT=551&amp;LAYERS=countries,countries_shapeburst&amp;FORMAT=image/jpeg&amp;HIGHLIGHT_GEOM=POLYGON((590000 6900000, 590000 7363000, 2500000 7363000, 2500000 6900000, 590000 6900000))&amp;HIGHLIGHT_SYMBOL=&lt;StyledLayerDescriptor&gt;&lt;UserStyle&gt;&lt;Name&gt;Highlight&lt;/Name&gt;&lt;FeatureTypeStyle&gt;&lt;Rule&gt;&lt;Name&gt;Symbol&lt;/Name&gt;&lt;LineSymbolizer&gt;&lt;Stroke&gt;&lt;SvgParameter ame="stroke"&gt;%233a093a&lt;/SvgParameter&gt;&lt;SvgParameter name="stroke-opacity"&gt;1&lt;/SvgParameter&gt;&lt;SvgParameter name="stroke-width"&gt;1.6&lt;/SvgParameter&gt;&lt;/Stroke&gt;&lt;/LineSymbolizer&gt;&lt;/Rule&gt;&lt;/FeatureTypeStyle&gt;&lt;/UserStyle&gt;&lt;/StyledLayerDescriptor&gt;&amp;HIGHLIGHT_LABELSTRING=QGIS Tutorial&amp;HIGHLIGHT_LABELSIZE=30&amp;HIGHLIGHT_LABELCOLOR=%23000000&amp;HIGHLIGHT_LABELBUFFERCOLOR=%23FFFFFF&amp;HIGHLIGHT_LABELBUFFERSIZE=3&amp;SELECTION=countries:171,65</code></p> <p><img src="/assets/images/posts/2020/QGISServer/redlining.png" alt="Use Redlining"/></p> <h4 id="getprint">GetPrint</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?map=world.qgs&amp;SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetPrint&amp;FORMAT=pdf&amp;TRANSPARENT=true&amp;SRS=EPSG:3857&amp;DPI=300&amp;TEMPLATE=Population distribution&amp;map0:extent=-2786,4372992,3358959,7513746&amp;LAYERS=countries</code><br/> <img src="/assets/images/posts/2020/QGISServer/getprint.png" alt="Get Print"/></p> <h4 id="wfs-getfeature">WFS GetFeature</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?SERVICE=WFS&amp;VERSION=1.1.0&amp;REQUEST=GetFeature&amp;TYPENAME=countries&amp;map=world.qgs</code> <img src="/assets/images/posts/2020/QGISServer/wfsgetfeature.png" alt="WFS GetFeature"/></p> <h4 id="wmts">WMTS:</h4> <p><code class="language-plaintext highlighter-rouge">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?SERVICE=WMTS&amp;REQUEST=GetTile&amp;MAP=world.qgs&amp;LAYER=countries&amp;FORMAT=image/png&amp;TILEMATRIXSET=EPSG:3857&amp;TileMatrix=0&amp;TILEROW=0&amp;TILECOL=0</code> <img src="/assets/images/posts/2020/QGISServer/wmts.png" alt="WMTS"/></p> <h4 id="add-wfs-in-qgis-python-console">Add WFS in QGIS Python Console:</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://localhost/cgi-bin/qgis_mapserv.fcgi.exe?SERVICE=WFS&amp;VERSION=1.1.0&amp;REQUEST=GetFeature&amp;TYPENAME=countries&amp;map=world.qgs</span><span class="sh">'</span>
<span class="n">qgis</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">iface</span><span class="p">.</span><span class="nf">addVectorLayer</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="sh">'</span><span class="s">qgisserverwfs</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">WFS</span><span class="sh">'</span><span class="p">)</span>  
</code></pre></div></div> <p><img src="/assets/images/posts/2020/QGISServer/wfsqgis.png" alt="Add WFS in QGIS Python Console"/></p>]]></content><author><name></name></author><category term="Tutorial"/><category term="HCMGIS Plugin"/><category term="QGIS Server"/><summary type="html"><![CDATA[How to istall QGIS Server on Windows]]></summary></entry><entry><title type="html">Call HCMGIS Library in Standalone PyQGIS Application</title><link href="https://becagis.github.io/tutorial/2020/05/03/call-hcmgis-library-standalone-pyqgis.html" rel="alternate" type="text/html" title="Call HCMGIS Library in Standalone PyQGIS Application"/><published>2020-05-03T00:00:00+00:00</published><updated>2020-05-03T00:00:00+00:00</updated><id>https://becagis.github.io/tutorial/2020/05/03/call-hcmgis-library-standalone-pyqgis</id><content type="html" xml:base="https://becagis.github.io/tutorial/2020/05/03/call-hcmgis-library-standalone-pyqgis.html"><![CDATA[<hr/> <h3 id="1-import-hcmgis-library-in-standalone-pyqgis-application">1. Import HCMGIS library in Standalone PyQGIS Application:</h3> <h5 id="in-your-pygis-application-simply-copy-hcmgis_librarypy-to-your-project-folder-and-then-import-by-from-hcmgis_library-import-">In your PyGIS Application, simply copy hcmgis_library.py to your project folder and then import by ‚Äúfrom hcmgis_library import *‚Äù</h5> <h5 id="if-you-dont-want-to-copy-hcmgis_librarypy-just-reference-to-it-as-below">If you don‚Äôt want to copy hcmgis_library.py, just reference to it as below:</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qgis.core</span> <span class="kn">import</span> <span class="n">QgsApplication</span><span class="p">,</span> <span class="n">QgsProcessingFeedback</span>
<span class="kn">from</span> <span class="n">qgis.analysis</span> <span class="kn">import</span> <span class="n">QgsNativeAlgorithms</span>
<span class="n">QgsApplication</span><span class="p">.</span><span class="nf">setPrefixPath</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">C:\OSGeo4W64\apps\qgis</span><span class="sh">'</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span> <span class="c1"># your QGIS Install Folder
</span><span class="n">qgs</span> <span class="o">=</span> <span class="nc">QgsApplication</span><span class="p">([],</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">qgs</span><span class="p">.</span><span class="nf">initQgis</span><span class="p">()</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="c1">## Add the path to processing so we can import it next
</span><span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">C:\OSGeo4W64\apps\qgis\python\plugins</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">C:</span><span class="se">\\</span><span class="s">Users\DELLG7</span><span class="se">\\</span><span class="s">AppData</span><span class="se">\\</span><span class="s">Roaming</span><span class="se">\\</span><span class="s">QGIS</span><span class="se">\\</span><span class="s">QGIS3</span><span class="se">\\</span><span class="s">profiles</span><span class="se">\\</span><span class="s">default</span><span class="se">\\</span><span class="s">python</span><span class="se">\\</span><span class="s">plugins</span><span class="se">\\</span><span class="s">HCMGIS</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># Location of HCMGIS Plugin on your computer
</span>
<span class="kn">from</span> <span class="n">processing.core.Processing</span> <span class="kn">import</span> <span class="n">Processing</span>
<span class="n">Processing</span><span class="p">.</span><span class="nf">initialize</span><span class="p">()</span> <span class="c1"># Beacause HCMGIS Plugin used some native QGIS algorithms in voronoi-related Sptial Processing tools
</span><span class="n">QgsApplication</span><span class="p">.</span><span class="nf">processingRegistry</span><span class="p">().</span><span class="nf">addProvider</span><span class="p">(</span><span class="nc">QgsNativeAlgorithms</span><span class="p">())</span>

<span class="c1"># Import hcmgis_library
</span><span class="kn">from</span> <span class="n">hcmgis_library</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div></div> <h3 id="2-list-of-hcmgis-library-functions">2. List of HCMGIS Library Functions:</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_basemap_load</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19_timeseries</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19_vietnam</span><span class="p">()</span>  
<span class="nf">hcmgis_medialaxis</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>  
<span class="nf">hcmgis_centerline</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">density</span><span class="p">,</span><span class="n">chksurround</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="nf">hcmgis_closest_farthest</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">closest</span><span class="p">,</span><span class="n">farthest</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="nf">hcmgis_lec</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="3-call-hcmgis-library">3. Call HCMGIS Library:</h3> <p><img src="/assets/images/posts/2020/HCMGIS/standalonepyqgis.png" alt="Standalone PyQGIS"/></p> <hr/> <h4 id="reference--call-hcmgis-plugin-qgis-python-console">Reference: <a href="https://thangqd.github.io/blog/call-hcmgis-library-qgis-python-console">Call HCMGIS Plugin QGIS Python Console</a></h4>]]></content><author><name></name></author><category term="Tutorial"/><category term="HCMGIS Plugin"/><category term="QGIS"/><summary type="html"><![CDATA[How to call HCMGIS Library in Standalone PyQGIS Application]]></summary></entry><entry><title type="html">Call HCMGIS Library in QGIS Console</title><link href="https://becagis.github.io/tutorial/2020/05/02/call-hcmgis-library-qgis-python-console.html" rel="alternate" type="text/html" title="Call HCMGIS Library in QGIS Console"/><published>2020-05-02T00:00:00+00:00</published><updated>2020-05-02T00:00:00+00:00</updated><id>https://becagis.github.io/tutorial/2020/05/02/call-hcmgis-library-qgis-python-console</id><content type="html" xml:base="https://becagis.github.io/tutorial/2020/05/02/call-hcmgis-library-qgis-python-console.html"><![CDATA[<hr/> <h3 id="1-import-hcmgis-library">1. Import HCMGIS library:</h3> <h4 id="after-install-hcmgis-plugin-open-qgis-python-console-and-import-hcmgishcmgis_library">After install HCMGIS Plugin, open QGIS Python Console and import HCMGIS.hcmgis_library:</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">HCMGIS.hcmgis_library</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div></div> <h3 id="2-list-of-hcmgis-library-functions">2. List of HCMGIS Library Functions:</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_basemap_load</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19_timeseries</span><span class="p">()</span>  
<span class="nf">hcmgis_covid19_vietnam</span><span class="p">()</span>  
<span class="nf">hcmgis_medialaxis</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>  
<span class="nf">hcmgis_centerline</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">density</span><span class="p">,</span><span class="n">chksurround</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="nf">hcmgis_closest_farthest</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">closest</span><span class="p">,</span><span class="n">farthest</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="nf">hcmgis_lec</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="3-call-hcmgis-library">3. Call HCMGIS Library:</h3> <h4 id="add-dozens-of-basemaps-to-xyz-tiles-of-qgis">Add dozens of basemaps to XYZ Tiles of QGIS:</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_basemap_load</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/basemap_load.png" alt="hcmgis_basemap_load"/></p> <h4 id="download-global-covid-19-live-update-data">Download Global COVID-19 live update Data</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_covid19</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/global_covid19.png" alt="Global COVID-19"/></p> <hr/> <h4 id="download-global-covid-19-timeseries-data">Download Global COVID-19 Timeseries Data</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_covid19_timeseries</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/global_covid19_timeseries.png" alt="Global COVID-19 Timeseries"/></p> <hr/> <h4 id="download-vietnam-covid-19-live-update-in-polygon">Download Vietnam COVID-19 live update in Polygon</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_covid19_vietnam</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/vietnam_covid19.png" alt="Vietnam COVID-19"/></p> <hr/> <h3 id="create-medial-axis-skeleton-from-road-in-polygon">Create Medial Axis/ Skeleton from Road in Polygon</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_medialaxis</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">density</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <p><em>PLEASE DON‚ÄôT MIND the parameter ‚Äòstatus_callback = None‚Äô in these functions below</em><br/> <em>because it is written for HCMGIS Plugin with GUI interaction and also for running in Python console</em></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">input</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">road.shp</span><span class="sh">"</span> <span class="c1"># your polygon input layer
</span><span class="n">output</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">skeleton.shp</span><span class="sh">"</span> <span class="c1"># your skeleton output in .sqlite, .shp, .geojson, .gpkg or kml
</span><span class="nf">hcmgis_medialaxis</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="sh">'</span><span class="s">OBJECTID</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> 
<span class="c1"># hcmgis_medialaxis(layer, field, density,output,status_callback = None)
# layer: input layer
# field: unique field of input layer, in this case is 'OBJECTID'
# density (float value): densify geometries with a given interval (in this case is 1 meter). 
# Smaller density value returns smoother centerline but slower
</span></code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/skeleton.png" alt="Skeleton"/></p> <hr/> <h2 id="create-centerline-from-building-block">Create Centerline from Building block</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_centerline</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">density</span><span class="p">,</span><span class="n">chksurround</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">input</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">block.shp</span><span class="sh">"</span> <span class="c1"># your polygon input
</span><span class="n">output</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">centerline.geojson</span><span class="sh">"</span> <span class="c1"># your centerline output in .sqlite, .shp, .geojson, .gpkg or kml
</span><span class="nf">hcmgis_centerline</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="c1"># hcmgis_centerline(layer,density,chksurround,distance,output,status_callback = None)
# density (float value): densify geometries with given an interval (in this case is 1 meter). 
# Smaller density value returns smoother centerline but slower
# chksurround: if chksurround is True, then the function will also create a surrounding 'centerline' 
# with a given "distance" to the bounding box of building block (in this case is 2 meters)
</span></code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/centerline.png" alt="centerline"/></p> <hr/> <h3 id="closest-farthest-pair-of-points">Closest/ farthest pair of points</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_closest_farthest</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">closest</span><span class="p">,</span><span class="n">farthest</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">input</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">points.shp</span><span class="sh">"</span>  <span class="c1"># your point input
</span><span class="n">closest</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">closest.shp</span><span class="sh">"</span> <span class="c1"># your closest pair of point output in polyline  
#connecting closest, second closest,.. pairs of points  with distance attribute.
</span><span class="n">farthest</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">farthest.shp</span><span class="sh">"</span> <span class="c1"># your farthest pair of point output in polyline   
#connecting farthest, second farthest,.. pairs of points  with distance attribute.
</span><span class="nf">hcmgis_closest_farthest</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="sh">'</span><span class="s">fid</span><span class="sh">'</span><span class="p">,</span> <span class="n">closest</span><span class="p">,</span> <span class="n">farthest</span><span class="p">,</span> <span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="c1"># hcmgis_closest_farthest(layer,field,closest,farthest,status_callback = None): 
# "field": the unique field of input layer, in this case is 'fid'
</span></code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/closest_farthest.png" alt="centerline"/></p> <hr/> <h3 id="largest-empty-circle">Largest Empty Circle</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hcmgis_lec</span><span class="p">(</span><span class="n">layer</span><span class="p">,</span><span class="n">field</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">input</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">points.shp</span><span class="sh">"</span> <span class="c1"># your point input
</span><span class="n">output</span> <span class="o">=</span> <span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">osm</span><span class="se">\\</span><span class="s">lec.shp</span><span class="sh">"</span>  <span class="c1"># your Largest Empty Circle in Polygon
</span><span class="nf">hcmgis_lec</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span><span class="sh">'</span><span class="s">fid</span><span class="sh">'</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">status_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span>
<span class="c1"># hcmgis_lec(layer,field,output,status_callback = None): 
# "field": the unique field of input layer, in this case is 'fid'
</span></code></pre></div></div> <p><img src="/assets/images/posts/2020/HCMGIS/lec.png" alt="lec"/></p>]]></content><author><name></name></author><category term="Tutorial"/><category term="HCMGIS Plugin"/><category term="QGIS"/><summary type="html"><![CDATA[How to call HCMGIS Library in QGIS Console]]></summary></entry></feed>